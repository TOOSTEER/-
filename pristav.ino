#include <AnalogKey.h>
#include <GyverButton.h>
#include <charMap.h>
#include <GyverOLED.h>
#include <icons_7x7.h>
#include <icons_8x8.h>
GyverOLED<SSD1306_128x64, OLED_NO_BUFFER> oled;
#define up 5
#define down 3
#define ok 6
#define rightt 9
#define leftt 10
#define PIEZO_PIN 11
void setup() {
  Serial.begin(9600);
  pinMode(up, INPUT_PULLUP);
  pinMode(down, INPUT_PULLUP);
  pinMode(ok, INPUT_PULLUP);
  pinMode(leftt, INPUT_PULLUP);
  pinMode(rightt, INPUT_PULLUP);
  oled.setContrast(255);
  oled.init();
  oled.clear();
  oled.setScale(1.5);
}
void loop() {
  unsigned long timing_run = millis();
  unsigned long timing_const = 0;
  bool UP = digitalRead(up);
  bool DOWN = digitalRead(down);
  bool OK = digitalRead(ok);
  bool LEFT = digitalRead(leftt);
  bool RIGHT = digitalRead(rightt);
  static uint8_t pointer = 0;
  if (OK == 1) {
    tone (PIEZO_PIN, 700, 300);
    delay(500);
    switch (pointer) {
      case 0: Game_1(); break;
      case 1: Game_2(); break;
      case 2: Game_3(); break;
      case 3: Game_4(); break;
    }
  }
  if (LEFT == 1) {
    tone (PIEZO_PIN, 500, 300);
    delay(500);
  }
  if (RIGHT == 1) {
    tone (PIEZO_PIN, 500, 300);
    delay(500);
  }
  if (UP == 1) {
    pointer = constrain(pointer - 2, 0, 6);
    oled.clear();
    tone (PIEZO_PIN, 500, 300);
    delay(500);
  }
  if (DOWN == 1) {
    pointer = constrain(pointer + 2, 0, 6);
    oled.clear();
    tone(PIEZO_PIN, 500, 300);
    delay(500);
  }
  oled.setCursor(10, 0);
  oled.print("Game 1:  Змейка ");
  oled.setCursor(10, 2);
  oled.print("Game 2:  Название");
  oled.setCursor(10, 4);
  oled.print("Game 3:  Название");
  oled.setCursor(10, 6);
  oled.print("Game 4:  Название");
  oled.setCursor(0, 0);
  print_Pointer(pointer);
  delay(1000);
}
void print_Pointer(uint8_t ptr) {
  oled.setCursor(0, ptr);
  oled.print(">");
}
void Game_1 () {
  const uint8_t rook_bitmap PROGMEM = {
    0xff, 0xfe, 0x0c, 0xfe, 0x7c, 0x3c, 0x7f, 0xff, 0xff, 0xfe, 0x0c, 0xfe, 0x7c, 0x3c, 0x7f, 0xff,
    0xe0, 0x06, 0x3f, 0xf8, 0x67, 0x30, 0x60, 0x07, 0xc0, 0x06, 0x3f, 0xf8, 0x67, 0x30, 0x60, 0x03,
    0xcf, 0xe6, 0x00, 0x39, 0xe0, 0x30, 0x67, 0xf3, 0xcf, 0xe6, 0x00, 0x39, 0xe0, 0x30, 0x67, 0xf3,
    0xcf, 0xe6, 0x00, 0x39, 0xe0, 0x30, 0x67, 0xf3, 0xcf, 0xe6, 0x3c, 0xff, 0xff, 0x0c, 0x67, 0xf3,
    0xcf, 0xe6, 0x3c, 0xff, 0xff, 0x0c, 0x67, 0xf3, 0xcf, 0xe6, 0x33, 0xff, 0xe0, 0xf0, 0x67, 0xf3,
    0xcf, 0xe6, 0x33, 0xff, 0xe0, 0xf0, 0x67, 0xf3, 0xc0, 0x06, 0x03, 0xe6, 0x7c, 0x0c, 0x60, 0x03,
    0xc0, 0x06, 0x03, 0xe6, 0x7c, 0x0c, 0x60, 0x03, 0xff, 0xfe, 0x33, 0x39, 0x9c, 0xcc, 0x7f, 0xff,
    0xff, 0xfe, 0x33, 0x39, 0x9c, 0xcc, 0x7f, 0xff, 0x00, 0x00, 0x3e, 0xe1, 0xff, 0xf8, 0x00, 0x00,
    0x00, 0x00, 0x3c, 0xe1, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xe1, 0xff, 0xf0, 0x00, 0x00,
    0x31, 0xfe, 0x30, 0xf9, 0xe0, 0x33, 0xe7, 0x8c, 0x39, 0xff, 0x30, 0xf9, 0xe0, 0x33, 0xe7, 0x8c,
    0x0f, 0x81, 0xff, 0x06, 0x1f, 0xc0, 0x79, 0x8c, 0x0f, 0x81, 0xff, 0x06, 0x1f, 0xc0, 0x79, 0x8c,
    0xf0, 0x67, 0xcc, 0xe1, 0x80, 0x3f, 0xf8, 0x00, 0xf0, 0x67, 0xcc, 0xe1, 0x80, 0x3f, 0xf8, 0x00,
    0xce, 0x01, 0xc0, 0xe0, 0x7f, 0xfc, 0x01, 0x83, 0xce, 0x01, 0xc0, 0xe0, 0x7f, 0xfc, 0x01, 0x83,
    0xc7, 0x1f, 0xf3, 0xff, 0xdd, 0xff, 0xc1, 0x8f, 0xc1, 0x9f, 0xf3, 0x3f, 0x9c, 0x03, 0xe1, 0x8c,
    0xc1, 0x9f, 0xf3, 0x3f, 0x9c, 0x03, 0xe1, 0x8c, 0xf1, 0xe1, 0xfc, 0xe6, 0x00, 0xc0, 0x66, 0x73,
    0xf1, 0xe1, 0xfc, 0xe6, 0x00, 0xc0, 0xe6, 0x73, 0x0e, 0x66, 0x33, 0xe0, 0x00, 0xff, 0xf9, 0x8f,
    0x0e, 0x66, 0x33, 0xe0, 0x00, 0xff, 0xf9, 0x8f, 0xcf, 0xf9, 0xff, 0x3e, 0x1c, 0x3f, 0xe7, 0xf0,
    0xcf, 0xf9, 0xff, 0x3e, 0x1c, 0x3f, 0xe7, 0xf0, 0x3f, 0x87, 0x03, 0x07, 0xe7, 0xf3, 0xbf, 0x83,
    0x3f, 0x86, 0x03, 0x07, 0xe7, 0xf3, 0x9f, 0x83, 0xbf, 0xff, 0x83, 0x07, 0xe7, 0xf3, 0xbf, 0x83,
    0xf0, 0x79, 0xc0, 0x07, 0x87, 0x03, 0xfe, 0x00, 0xf0, 0x79, 0xc0, 0x07, 0x87, 0x03, 0xfe, 0x00,
    0xff, 0xff, 0xcf, 0x06, 0x1c, 0x30, 0x06, 0x03, 0xff, 0xff, 0xcf, 0x06, 0x1c, 0x30, 0x06, 0x03,
    0xf1, 0xe1, 0xfc, 0xf8, 0x7c, 0x3f, 0xf8, 0x7c, 0xf1, 0xe1, 0xfc, 0xf8, 0x7c, 0x3f, 0xf8, 0x7c,
    0xfe, 0x67, 0xcf, 0xff, 0x87, 0x3f, 0xff, 0xf3, 0xfe, 0x67, 0xcf, 0xff, 0x87, 0x3f, 0xff, 0xf3,
    0x00, 0x00, 0x33, 0xf9, 0xe7, 0x0c, 0x07, 0xf0, 0x00, 0x00, 0x33, 0xf9, 0xe7, 0x0c, 0x07, 0xf0,
    0x00, 0x00, 0x33, 0xf9, 0xe3, 0x2c, 0x47, 0xf0, 0xff, 0xfe, 0x0f, 0x00, 0x60, 0x3c, 0xe6, 0x70,
    0xff, 0xfe, 0x1f, 0x00, 0x70, 0x3c, 0x47, 0x70, 0xc0, 0x06, 0x33, 0x38, 0x1c, 0xfc, 0x07, 0x8f,
    0xc0, 0x06, 0x33, 0x38, 0x1c, 0xfc, 0x07, 0x8f, 0xcf, 0xe6, 0x3f, 0xff, 0x87, 0x3f, 0xfe, 0x03,
    0xcf, 0xe6, 0x3f, 0xff, 0x87, 0x3f, 0xfe, 0x03, 0xcf, 0xe6, 0x3f, 0xfe, 0x00, 0xc0, 0x38, 0x0c,
    0xcf, 0xe6, 0x3f, 0xfe, 0x00, 0xc0, 0x18, 0x0c, 0xcf, 0xe6, 0x03, 0x38, 0x63, 0xcf, 0x9e, 0x7f,
    0xcf, 0xe6, 0x03, 0x38, 0x67, 0xcf, 0x9e, 0x7f, 0xcf, 0xe6, 0x03, 0x38, 0x67, 0xcf, 0x9f, 0x7f,
    0xc0, 0x06, 0x3c, 0xe6, 0x1c, 0x0f, 0x87, 0xf3, 0xe0, 0x06, 0x3c, 0xe6, 0x18, 0x0f, 0x87, 0xf3,
    0xff, 0xfe, 0x0f, 0x3e, 0x60, 0x33, 0xfe, 0x00, 0xff, 0xfe, 0x0f, 0x3e, 0x60, 0x33, 0xfe, 0x00
  };
  oled.clear();
  oled.print(rook_bitmap);
  oled.update();
  while (1) {
    if (digitalRead(ok) == 1) return;
  }
}
void Game_2 () {
  oled.clear();
  oled.setCursor(35, 3);
  oled.print("Извините");
  oled.setCursor(25, 5);
  oled.print("Ещё не готово");
  oled.update();
  while (1) {
    if (digitalRead(ok) == 1) return;
  }
}

void Game_3 () {
  oled.clear();
  oled.setCursor(35, 3);
  oled.print("Извините");
  oled.setCursor(25, 5);
  oled.print("Ещё не готово");
  oled.update();
  while (1) {
    if (digitalRead(ok) == 1) return;
  }
}
void Game_4 () {
  oled.clear();
  oled.setCursor(35, 3);
  oled.print("Извините");
  oled.setCursor(25, 5);
  oled.print("Ещё не готово");
  oled.update();
  while (1) {
    if (digitalRead(ok) == 1) return;
  }
}
